generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  Feed          Feed[]
  Likes         Likes[]
  Screps        Screps[]
  Agree         Agree[]
  Comment       Comment[]
}

model verification_requests {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Feed {
  id         Int       @id @default(autoincrement())
  title      String
  content    String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  screps     Int       @default(0)
  likes      Int       @default(0)
  comments   Int       @default(0)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  agrees     Int       @default(0)
  disAgrees  Int       @default(0)
  Likes      Likes[]
  Screps     Screps[]
  Agree      Agree[]
  Comment    Comment[]
}

model Likes {
  id         String   @id @default(uuid())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  feed       Feed     @relation(fields: [feedId], references: [id])
  feedId     Int
  created_at DateTime @default(now())

  @@unique([authorId, feedId])
}

model Screps {
  id         String   @id @default(uuid())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  feed       Feed     @relation(fields: [feedId], references: [id])
  feedId     Int
  created_at DateTime @default(now())
}

model Agree {
  id         String      @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  feed       Feed        @relation(fields: [feedId], references: [id])
  feedId     Int
  action     AgreeAction
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  feed       Feed     @relation(fields: [feedId], references: [id])
  feedId     Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

enum AgreeAction {
  AGREE
  DISAGREE
}
